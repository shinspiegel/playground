---
type Link = {
  title: string;
  url?: string;
  subLink?: Link[];
};

const classList = (await Astro.glob("../pages/classes/*.mdx"))
  .filter((c) => !c.frontmatter?.unlisted)
  .sort((a, b) => a.frontmatter?.title?.localeCompare(b.frontmatter?.title))
  .sort((a, b) => a.frontmatter?.type?.localeCompare(b.frontmatter?.type))
  .map((item) => ({
    title: item.frontmatter?.title as string,
    url: item.url,
  }));

const sampleCharacter = (await Astro.glob("../pages/example-character/*.mdx"))
  .sort((a, b) => a.frontmatter?.title?.localeCompare(b.frontmatter?.title))
  .sort((a, b) => a.frontmatter?.type?.localeCompare(b.frontmatter?.type))
  .map((item) => ({
    title: item.frontmatter?.title as string,
    url: item.url,
  }));

const scenarios = (await Astro.glob("../pages/scenarios/*.mdx"))
  .sort((a, b) => a.frontmatter?.title?.localeCompare(b.frontmatter?.title))
  .sort((a, b) => a.frontmatter?.type?.localeCompare(b.frontmatter?.type))
  .map((item) => ({
    title: item.frontmatter?.title as string,
    url: item.url,
  }));

const links: Link[] = [
  { title: "Home", url: "/" },
  {
    title: "Rules",
    subLink: [
      { title: "Basic Rules", url: "/basic-rules" },
      { title: "Game Rules", url: "/rules" },
    ],
  },
  { title: "Characters", url: "/characters", subLink: sampleCharacter },
  { title: "Classes", url: "/classes", subLink: classList },
  { title: "Sample Characters", url: "/example-character" },
  { title: "Scenarios", url: "/scenarios", subLink: scenarios },
  { title: "About", url: "/about" },
];
---

<nav id="navigation" data-is-closed="true">
  <button id="navigation-button">Open</button>

  <ul id="navigation-list">
    {
      links.map(({ title, url, subLink }) => (
        <>
          <li>{url ? <a href={url}>{title}</a> : title}</li>
          {subLink && (
            <ul>
              {subLink.map(({ title, url }) => (
                <li>
                  <a href={url}>{title}</a>
                </li>
              ))}
            </ul>
          )}
        </>
      ))
    }
  </ul>
</nav>

<style lang="scss">
  #navigation-list {
    padding: 2rem 2rem 2rem 2rem;
    overflow-y: scroll;
    height: 100%;
  }

  ul {
    list-style: none;

    &:not(:last-child) {
      margin-left: 2rem;
    }
  }

  nav {
    @media (max-width: 767px) {
      background: var(--background);
      height: 100vh;
      width: 20rem;
      position: fixed;
      top: 0;
      left: 0;
      transition: all ease 0.3s;

      &[data-is-closed="false"] {
        left: 0;
      }

      &[data-is-closed="true"] {
        left: -20rem;
      }
    }

    @media (min-width: 768px) {
      display: block;
    }
  }

  button {
    position: absolute;
    bottom: 1rem;
    right: -4rem;

    @media (min-width: 768px) {
      display: none;
    }
  }
</style>

<script>
  const nav = document.getElementById("navigation");
  const navBtn = document.getElementById("navigation-button");

  navBtn?.addEventListener("click", handleClick);

  function handleClick() {
    const isClosed = nav?.getAttribute("data-is-closed") === "true";

    if (isClosed) {
      nav?.setAttribute("data-is-closed", "false");
    } else {
      nav?.setAttribute("data-is-closed", "true");
    }
  }
</script>
