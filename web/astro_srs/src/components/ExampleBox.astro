---
export interface Props {
  openedText?: string;
  closedText?: string;
}

const { closedText = "Click to open the example", openedText = "Click to close the example" } = Astro.props;
---

<div data-is-open="true" class="example-box">
  <div class="title" data-text-opened={openedText} data-text-closed={closedText}>{closedText}</div>
  <slot />
</div>

<script>
  for (const el of document.getElementsByClassName("example-box")) {
    const area = el.querySelector(".title");
    if (area) {
      area.addEventListener("click", () => onClick(el, area));
    }
  }

  function onClick(wrapper: Element, title: Element) {
    if (wrapper.getAttribute("data-is-open") === "true") {
      wrapper.setAttribute("data-is-open", "false");
      title.innerHTML = title.getAttribute("data-text-opened") ?? "Click to open the example";
    } else {
      wrapper.setAttribute("data-is-open", "true");
      title.innerHTML = title.getAttribute("data-text-closed") ?? "Click to close the example";
    }
  }
</script>

<style lang="scss">
  .title {
    color: var(--faded-text);
    font-size: 1rem;
    transform: translateX(-0.5rem) translateY(-0.5rem);
    cursor: pointer;
  }

  .example-box {
    padding: 1rem;
    border: 1px solid var(--primary-shade);
    margin-bottom: 2rem;
    border-radius: 4px;
    overflow: hidden;
    transition: all 0.4s ease;

    &[data-is-open="true"] {
      max-height: 0.2rem;
    }

    &[data-is-open="false"] {
      max-height: 100vh;
    }
  }
</style>
