class("SolveTutorialScreen").extends(Screen)

function SolveTutorialScreen:init()
	SolveTutorialScreen.super.init(self)

	self.grid = Grid(true)
	self.dialog = TutorialDialog()
end

local TUTORIAL = {
	{
		text = "Welcome! This tutorial will teach you how to solve nonogram puzzles.",
		grid = "000000000000000001000100000100001000100100100001000100000100001111100100100001000100100100001000100100100001000100100000001000100100100000000000000000",
	},
	{
		text = "Before we start, if this text box is in the way, hold ⓑ to hide it and see all numbers.",
		grid = "000000000000000000011111100000000010000010000000010000010000000011111100000000010000010000000010000010000000010000010000000011111100000000000000000000",
	},
	{
		text = "In the game, press ⓐ to fill an empty square and press ⓐ again to clear it.",
		grid = "000000000000000000000111000000000001000100000000010000010000000010000010000000010000010000000010000010000000010000010000000010000010000000000000000000",
		steps = 5,
		update = function (screen, step)
			if step == 1 then
				screen.grid:jumpTo(6, 6)
			else
				screen.grid:moveBy(1, 0, true)
			end
			screen.grid:toggle(screen.grid:getCursor(), true)
		end,
	},
	{
		text = "The numbers tell you the size and order of blocks that have to be filled-in.",
		grid = "000000000000000000000000000000001001110000000000001110000000001101110011100001101110011100000000000011100000000000000000000000000000000000000000000000",
	},
	{
		text = "However, they don’t tell you the position of the blocks. That’s for you to find out.",
		grid = "101101110111100101101110011110101100111011110100110111011110010110111001111010110011101111010011011101111001011011101111001011011101111010110011101111",
	},
	{
		text = "Some blocks are fixed, others have wiggle room and need more context to be placed.",
		grid = "101010101010101000000000000000111000111000111000000000000000001100110011011000000000000000111111011111111000000000000000111111111111111000000000000000",
	},
	{
		text = "A number is highlighted if the corresponding block has been filled-in completely.",
		grid = "000000000000000000000000000000000000000000000011100111101110000000000000000011100111101110000000000000000011100111101110000000000000000000000000000000",
		solution = "000000000000000000000000000000000000000000000011100111000110000000000000000001100111101100000000000000000011000011101110000000000000000000000000000000",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "Be aware that this doesn’t mean that the position of the block is correct.",
		grid = "000000000000000000000000000000000000000000000011100111101110000000000000000011100111101110000000000000000011100111101110000000000000000000000000000000",
		solution = "000000000000000000000000000000000000000000000111000111000110000000000000000001101111001100000000000000000011000011100111000000000000000000000000000000",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "If it’s unclear which block has been completed, the number will not change.",
		grid = "000000000000000001110011100000000000000000000001110011100000000000000000000001110011100000000000000000000001110011100000000000000000000000000000000000",
		solution = "000000000000000111000000000000000000000000000001110000000000000000000000000000000011100000000000000000000000000000000111000000000000000000000000000000",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "And if a line contains an error, no number in that line will be highlighted.",
		grid = "000000000000000000000000000000000000000000000000000000000000001110011000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		hints = HINTS_ID_BLOCKS,
		steps = 2,
		update = function (screen, step)
			screen.grid:jumpTo(12, 5)
			screen.grid:toggle(screen.grid:getCursor(), true)
		end,
	},
	{
		text = "You can change the style of these hints in the sidebar or disable them in your profile.",
		grid = "001111111111000001000000001000001000001101000001000001101000001010011001000001011011001000001001110001000001000110001000001000000001000001111111111000",
	},
	{
		text = "To mark a known empty square, press ⓑ to cross it out and press ⓑ again to clear it.",
		grid = "000001000000000000001000000000000001000000000000001000000000000001000000000111110111101111000000000000000000000000000000000000000000000000000000000000",
		solution = "000000000000000000000000000000000000000000000000000000000000000000000000000111110111101111000000000000000000000000000000000000000000000000000000000000",
		hints = HINTS_ID_BLOCKS,
		steps = 2,
		update = function (screen, step)
			screen.grid:jumpTo(1 + step * 5, 6)
			screen.grid:toggleCross(screen.grid:getCursor(), true)
		end,
	},
	{
		text = "This can help placing blocks on the other axis.",
		grid = "000001000000000000001000000000000001000000000000001000000000000001000000000111110111101111000000000000000000000000000000000000000000000000000000000000",
		solution = "000000000000000000000000000000000000000000000000000000000000000000000000000111112111121111000000000000000000000000000000000000000000000000000000000000",
		hints = HINTS_ID_BLOCKS,
		steps = 5,
		update = function (screen, step)
			screen.grid:jumpTo(6, step)
			screen.grid:toggle(screen.grid:getCursor(), true)
		end,
	},
	{
		text = "To save you pointless clicking, known empty lines are crossed out automatically.",
		grid = "000000000000000000000000000000000000000000000000000101000000000000000000000000001000100000000000111000000000000000000000000000000000000000000000000000",
		solution = "222222222222222222222222222222222222222222222222220000022222222222222222222222220000022222222220000022222222222222222222222222222222222222222222222222",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "Finally, if you are stuck, take a block, try to place it somewhere, and see if it fits.",
		grid = "000000000000000000000000000000000000000000000000000101000000000000000000000000001000100000000000111000000000000000000000000000000000000000000000000000",
		solution = "222222222222222222222222222222222222222222222222222121222222222222222222222222220000022222222220000022222222222222222222222222222222222222222222222222",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "E.g. the 3 can’t be placed on the left because it would block the 1s above.",
		grid = "000000000000000000000000000000000000000000000000000101000000000000000000000000001000100000000000111000000000000000000000000000000000000000000000000000",
		solution = "222222222222222222222222222222222222222222222222222121222222222222222222222222222220022222222221110022222222222222222222222222222222222222222222222222",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "It can’t be placed on the right either for the same reason.",
		grid = "000000000000000000000000000000000000000000000000000101000000000000000000000000001000100000000000111000000000000000000000000000000000000000000000000000",
		solution = "222222222222222222222222222222222222222222222222222121222222222222222222222222220022222222222220011122222222222222222222222222222222222222222222222222",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "So center it is.",
		grid = "000000000000000000000000000000000000000000000000000101000000000000000000000000001000100000000000111000000000000000000000000000000000000000000000000000",
		solution = "222222222222222222222222222222222222222222222222222121222222222222222222222222220222022222222222111222222222222222222222222222222222222222222222222222",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "You’re all set. Have fun playing the game! ☺",
		grid = "000000000000000000000000000000000000000000000000000101000000000000000000000000001000100000000000111000000000000000000000000000000000000000000000000000",
		solution = "222222222222222222222222222222222222222222222222222121222222222222222222222222221222122222222222111222222222222222222222222222222222222222222222222222",
		hints = HINTS_ID_BLOCKS,
	}
}

function SolveTutorialScreen:enter(context)
	self.page = 1
	self.hintStyle = context.settings.hintStyle
	self:loadPage()
end

function SolveTutorialScreen:leave()
	self.grid:leave()
	self.dialog:leave()
end

function SolveTutorialScreen:loadPage()
	local page = TUTORIAL[self.page]
	 self.puzzle = Puzzle({
		 width = 15,
		 height = 10,
		 grid = page.grid or GRID_EMPTY
	})
	local solution = nil
	local pageSolution = page.solution or page.grid
	if pageSolution then
		solution = table.create(150, 0)
		local values = {string.byte(pageSolution, 1, 150)}
		for i = 1, 150 do
			solution[i] = values[i] - 48
		end
	end
	self.grid:enter(self.puzzle, MODE_TUTORIAL, page.hints or HINTS_ID_OFF, self.hintStyle, false, solution)
	self.grid:hideCursor()
	self.dialog:enter(page.text)
	self.dialog:setVisible(true)
	self.frame = -19
	self.cantIdle = page.steps
end

function SolveTutorialScreen:updateHintStyle(context)
	self.hintStyle = context.settings.hintStyle
	self.grid:updateHintStyle(self.hintStyle)
end

function SolveTutorialScreen:AButtonDown()
	if self.page < #TUTORIAL then
		self.page += 1
		self:loadPage()
	else
		openSidebar()
	end
end

function SolveTutorialScreen:BButtonDown()
	self.dialog:setVisible(false)
end

function SolveTutorialScreen:BButtonUp()
	self.dialog:setVisible(true)
end

function SolveTutorialScreen:leftButtonDown(pressed)
	if self.page > 1 then
		self.page -= 1
		self:loadPage()
	end
end

function SolveTutorialScreen:rightButtonDown(pressed)
	if self.page < #TUTORIAL then
		self.page += 1
		self:loadPage()
	end
end

function SolveTutorialScreen:update()
	if self.frame then
		if self.frame % 20 == 0 then
			local page = TUTORIAL[self.page]
			if page.steps then
				local step = math.floor(self.frame / 20)
				page.update(self, step % page.steps + 1)
			end
		end
		self.frame += 1
	end
end
